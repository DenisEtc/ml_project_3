services:
  ml_postgres:
    image: postgres:15
    container_name: ml_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ml_service}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB:-ml_service}"]
      interval: 5s
      timeout: 5s
      retries: 20

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml_app
    env_file: .env
    environment:
      PYTHONPATH: /app
      POSTGRES_HOST: ml_postgres
      # включайте 1 для синхронного демо; 0 — боевой режим через очередь
      TEST_MODE: "0"
      # параметры очереди (чтобы паблишер брал их из окружения)
      RABBIT_HOST: rabbitmq
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      QUEUE_NAME: ml_tasks
    ports:
      - "8000:8000"
    depends_on:
      ml_postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    container_name: ml_worker
    env_file: .env
    environment:
      # очередь
      RABBIT_HOST: rabbitmq
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      QUEUE_NAME: ml_tasks
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_HOST: ml_postgres
      MODEL_PATH: shared/ml_model/heart_failure.pkl
      # простые «веса» для линейного предсказания
      FEATURE_ORDER: feature1,feature2,feature3
      WEIGHTS: 0.7,0.2,0.1
      BIAS: 0.0
    depends_on:
      ml_postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml_tests
    env_file: .env
    environment:
      API_BASE_URL: http://ml_app:8000
      PYTHONPATH: /app
    depends_on:
      app:
        condition: service_started
    command: >
      sh -c "
      for i in $(seq 1 60); do
        curl -s http://ml_app:8000/openapi.json && break || sleep 1;
      done &&
      pip install --no-cache-dir pytest &&
      pytest -q app/tests
      "

volumes:
  rabbitmq_data:
  postgres_data:
